Tool: Claude
Date: 2025-05-22
Me: I need to implement natural language processing functions for my weather app. Can you help me create a basic function that parses user questions like "Will it rain tomorrow in London?" and extracts the key information?
AI: Here's a basic implementation for parsing weather questions:
def parse_weather_question(question):
    """
    Parse a natural language weather question.
    
    Args:
        question (str): User's weather-related question
    
    Returns:
        dict: Extracted information including location, time period, and weather attribute
    """
    # Simple keyword-based parsing
    question_lower = question.lower()
    
    # Extract location (basic approach)
    location = None
    if " in " in question_lower:
        location = question_lower.split(" in ")[-1].strip()
    
    # Extract time period
    time_period = "current"
    if "tomorrow" in question_lower:
        time_period = "tomorrow"
    elif "today" in question_lower:
        time_period = "today"
    
    # Extract weather attribute
    attribute = "general"
    if "rain" in question_lower:
        attribute = "precipitation"
    elif "temperature" in question_lower or "hot" in question_lower or "cold" in question_lower:
        attribute = "temperature"
    
    return {
        "location": location,
        "time_period": time_period,
        "attribute": attribute,
        "original_question": question
    }
Me: This basic approach is too simplistic and will miss many variations. Since I have access to hands-on-ai, can you create a more sophisticated version that uses AI to understand the context and extract information more accurately?
AI: Absolutely! Here's an AI-powered version that uses the hands-on-ai system for better parsing:
def parse_weather_question(question):
    """
    Parse a natural language weather question using AI.
    
    Args:
        question (str): User's weather-related question
    
    Returns:
        dict: Extracted information including location, time period, and weather attribute
    """
    if not question or not isinstance(question, str):
        return {"error": "Invalid question: must be a non-empty string"}
    
    # System prompt for question analysis
    system_prompt = """
    You are a weather question analyzer. Extract key information from weather-related questions.
    
    For each question, identify:
    1. Location (city, country, or "unknown" if not specified)
    2. Time period (today, tomorrow, this week, weekend, specific date, or "current")
    3. Weather attribute (temperature, precipitation, wind, humidity, general, or "unknown")
    4. Question type (forecast, current, advice, comparison)
    
    Return your answer as a JSON object with these exact keys:
    {
        "location": "extracted location or 'unknown'",
        "time_period": "time reference",
        "attribute": "weather aspect",
        "question_type": "type of question",
        "confidence": "high/medium/low"
    }
    
    Examples:
    "Will it rain tomorrow in Paris?" -> {"location": "Paris", "time_period": "tomorrow", "attribute": "precipitation", "question_type": "forecast", "confidence": "high"}
    "What's the weather like?" -> {"location": "unknown", "time_period": "current", "attribute": "general", "question_type": "current", "confidence": "medium"}
    """
    
    analysis_prompt = f"Analyze this weather question: '{question}'"
    
    try:
        # Get AI analysis
        response = get_response(analysis_prompt, system=system_prompt)
        
        # Try to parse the JSON response
        import json
        try:
            parsed_data = json.loads(response)
            
            # Add original question and processing metadata
            result = {
                **parsed_data,
                "original_question": question,
                "processing_method": "ai_powered",
                "raw_ai_response": response
            }
            
            return result
            
        except json.JSONDecodeError:
            # If JSON parsing fails, fall back to keyword extraction
            print(f"⚠️ AI response wasn't valid JSON, falling back to keyword extraction")
            return parse_weather_question_fallback(question)
            
    except Exception as e:
        print(f"⚠️ AI parsing failed: {e}, using fallback method")
        return parse_weather_question_fallback(question)

def parse_weather_question_fallback(question):
    """Fallback keyword-based parsing when AI fails."""
    question_lower = question.lower().strip()
    
    # Location extraction
    location = "unknown"
    location_patterns = [" in ", " at ", " for "]
    for pattern in location_patterns:
        if pattern in question_lower:
            potential_location = question_lower.split(pattern)[-1].strip()
            # Clean up common endings
            for ending in [" today", " tomorrow", " this week", "?"]:
                if potential_location.endswith(ending):
                    potential_location = potential_location[:-len(ending)].strip()
            if potential_location:
                location = potential_location
            break
    
    # Time period extraction
    time_keywords = {
        "today": ["today", "right now", "currently"],
        "tomorrow": ["tomorrow"],
        "this week": ["this week", "week"],
        "weekend": ["weekend", "saturday", "sunday"],
        "current": ["now", "current", "currently"]
    }
    
    time_period = "current"
    for period, keywords in time_keywords.items():
        if any(keyword in question_lower for keyword in keywords):
            time_period = period
            break
    
    # Attribute extraction
    attribute_keywords = {
        "temperature": ["temperature", "hot", "cold", "warm", "cool", "degrees"],
        "precipitation": ["rain", "snow", "precipitation", "wet", "umbrella"],
        "wind": ["wind", "windy", "breeze"],
        "humidity": ["humidity", "humid", "dry"],
        "general": ["weather", "forecast", "conditions"]
    }
    
    attribute = "general"
    for attr, keywords in attribute_keywords.items():
        if any(keyword in question_lower for keyword in keywords):
            attribute = attr
            break
    
    # Question type
    question_type = "current"
    if any(word in question_lower for word in ["will", "going to", "forecast", "predict"]):
        question_type = "forecast"
    elif any(word in question_lower for word in ["should", "recommend", "advice", "suggest"]):
        question_type = "advice"
    
    return {
        "location": location,
        "time_period": time_period,
        "attribute": attribute,
        "question_type": question_type,
        "confidence": "medium",
        "original_question": question,
        "processing_method": "keyword_fallback"
    }
Me: Now I need the generate_weather_response() function that takes the parsed question and weather data to create natural language responses. Can you make it context-aware and able to provide helpful advice based on the weather conditions?
AI: Perfect! Here's a comprehensive response generation function:
def generate_weather_response(parsed_question, weather_data):
    """
    Generate a natural language response to a weather question.
    
    Args:
        parsed_question (dict): Parsed question data from parse_weather_question()
        weather_data (dict): Weather data from get_weather_data()
    
    Returns:
        str: Natural language response
    """
    # Validate inputs
    if "error" in parsed_question:
        return f"I couldn't understand your question: {parsed_question['error']}"
    
    if "error" in weather_data:
        return f"I'm sorry, I couldn't get weather data: {weather_data['error']}"
    
    # Extract key information
    location = weather_data.get("location", "your location")
    question_type = parsed_question.get("question_type", "current")
    attribute = parsed_question.get("attribute", "general")
    time_period = parsed_question.get("time_period", "current")
    
    # Create context for AI response generation
    context_prompt = f"""
    Generate a helpful, conversational weather response based on this information:
    
    User Question: {parsed_question['original_question']}
    Location: {location}
    Time Period: {time_period}
    Weather Aspect: {attribute}
    Question Type: {question_type}
    
    Current Weather:
    - Temperature: {weather_data['current']['temperature']}°
    - Condition: {weather_data['current']['condition']}
    - Humidity: {weather_data['current']['humidity']}%
    - Wind: {weather_data['current']['wind_speed']} km/h
    
    Forecast Data: {len(weather_data['forecast'])} days available
    
    Guidelines:
    1. Answer the specific question asked
    2. Be conversational and helpful
    3. Include relevant advice (clothing, activities, precautions)
    4. Keep response concise but informative
    5. If asking about future weather, use forecast data
    6. Include specific numbers and details
    """
    
    try:
        # Generate AI response
        response = get_response(
            "Create a weather response based on the provided context.",
            system=context_prompt
        )
        
        # Add emoji and formatting for better user experience
        formatted_response = add_weather_formatting(response, weather_data, parsed_question)
        
        return formatted_response
        
    except Exception as e:
        print(f"⚠️ AI response generation failed: {e}")
        # Fall back to template-based response
        return generate_template_response(parsed_question, weather_data)

def add_weather_formatting(response, weather_data, parsed_question):
    """Add emojis and formatting to make the response more engaging."""
    
    # Get appropriate weather emoji
    condition = weather_data['current']['condition'].lower()
    weather_emoji = get_weather_symbol(condition)
    
    # Add temperature emoji based on temp
    temp = weather_data['current']['temperature']
    if temp > 25:
        temp_emoji = "🔥"
    elif temp > 15:
        temp_emoji = "🌡️"
    elif temp > 5:
        temp_emoji = "❄️"
    else:
        temp_emoji = "🥶"
    
    # Format the response with emojis
    formatted = f"{weather_emoji} {response}"
    
    # Add relevant advice emoji based on conditions
    if "rain" in condition:
        formatted += " ☂️"
    if "sun" in condition:
        formatted += " 🕶️"
    if weather_data['current']['wind_speed'] > 20:
        formatted += " 💨"
    
    return formatted

def generate_template_response(parsed_question, weather_data):
    """Generate response using templates when AI fails."""
    
    location = weather_data.get("location", "your area")
    current = weather_data["current"]
    
    # Basic template responses
    if parsed_question["question_type"] == "current":
        return f"Right now in {location}, it's {current['temperature']}° and {current['condition'].lower()}. " \
               f"Humidity is {current['humidity']}% with winds at {current['wind_speed']} km/h."
    
    elif parsed_question["question_type"] == "forecast":
        if weather_data["forecast"]:
            tomorrow = weather_data["forecast"][0] if len(weather_data["forecast"]) > 0 else None
            if tomorrow:
                return f"Tomorrow in {location}, expect a high of {tomorrow['max_temp']}° " \
                       f"and low of {tomorrow['min_temp']}° with {tomorrow['condition'].lower()}."
        return f"I can tell you the current weather in {location} is {current['temperature']}° and {current['condition'].lower()}."
    
    elif parsed_question["question_type"] == "advice":
        advice = generate_weather_advice(weather_data)
        return f"Based on the weather in {location} ({current['temperature']}°, {current['condition'].lower()}), {advice}"
    
    return f"The weather in {location} is currently {current['temperature']}° and {current['condition'].lower()}."

def generate_weather_advice(weather_data):
    """Generate practical weather advice based on conditions."""
    current = weather_data["current"]
    temp = current["temperature"]
    condition = current["condition"].lower()
    humidity = current["humidity"]
    wind_speed = current["wind_speed"]
    
    advice_parts = []
    
    # Temperature advice
    if temp > 25:
        advice_parts.append("dress lightly and stay hydrated")
    elif temp > 15:
        advice_parts.append("light layers would be comfortable")
    elif temp > 5:
        advice_parts.append("you'll want a jacket")
    else:
        advice_parts.append("dress warmly and consider multiple layers")
    
    # Condition-specific advice
    if "rain" in condition:
        advice_parts.append("bring an umbrella")
    elif "sun" in condition:
        advice_parts.append("sunglasses would be helpful")
    elif "snow" in condition:
        advice_parts.append("wear appropriate footwear for snow")
    
    # Wind advice
    if wind_speed > 25:
        advice_parts.append("it's quite windy so secure loose items")
    
    # Humidity advice
    if humidity > 80:
        advice_parts.append("it feels quite humid")
    elif humidity < 30:
        advice_parts.append("the air is quite dry")
    
    return ", ".join(advice_parts) + "."
Me: What if I want to make it even more sophisticated. Can you add support for multi-day questions, comparison queries, and the ability to handle follow-up questions that reference previous context?
AI: Excellent idea! Here's an enhanced version with conversation context and advanced query handling:
# Global conversation context storage
_conversation_context = {
    "last_location": None,
    "last_weather_data": None,
    "conversation_history": [],
    "user_preferences": {}
}

def parse_weather_question_advanced(question, context=None):
    """
    Advanced weather question parsing with context awareness.
    
    Args:
        question (str): User's weather question
        context (dict): Previous conversation context
    
    Returns:
        dict: Enhanced parsed question data
    """
    if context is None:
        context = _conversation_context
    
    # Enhanced system prompt for complex queries
    system_prompt = f"""
    You are an advanced weather question analyzer. Parse weather questions considering conversation context.
    
    Previous context:
    - Last location discussed: {context.get('last_location', 'none')}
    - Recent questions: {context.get('conversation_history', [])[-3:]}
    
    Extract and categorize:
    1. Location (use context if not specified)
    2. Time period (support ranges like "this week", "next 3 days")
    3. Weather attributes (can be multiple)
    4. Query complexity (simple, multi_day, comparison, follow_up)
    5. Reference type (absolute, relative, contextual)
    
    Special handling for:
    - Multi-day queries: "weather this week", "next 5 days"
    - Comparisons: "warmer than yesterday", "compared to last week"
    - Follow-ups: "what about tomorrow?", "and the weekend?"
    - Implicit location: "how about there?" (referring to previous location)
    
    Return JSON with these keys:
    {{
        "location": "location or 'contextual' if referring to previous",
        "time_period": "specific time reference",
        "time_range": {{"start": "start_day", "end": "end_day", "duration": "number_of_days"}},
        "attributes": ["list", "of", "weather", "aspects"],
        "query_complexity": "simple/multi_day/comparison/follow_up",
        "reference_type": "absolute/relative/contextual",
        "confidence": "high/medium/low",
        "requires_context": true/false
    }}
    """
    
    analysis_prompt = f"Analyze this weather question: '{question}'"
    
    try:
        response = get_response(analysis_prompt, system=system_prompt)
        
        import json
        parsed_data = json.loads(response)
        
        # Resolve contextual references
        if parsed_data.get("location") == "contextual" and context.get("last_location"):
            parsed_data["location"] = context["last_location"]
            parsed_data["resolved_from_context"] = True
        
        # Add to conversation history
        context["conversation_history"].append({
            "question": question,
            "parsed": parsed_data,
            "timestamp": datetime.datetime.now().isoformat()
        })
        
        # Keep only last 10 interactions
        if len(context["conversation_history"]) > 10:
            context["conversation_history"] = context["conversation_history"][-10:]
        
        return {
            **parsed_data,
            "original_question": question,
            "processing_method": "ai_advanced",
            "context_used": bool(context.get("last_location"))
        }
        
    except Exception as e:
        print(f"⚠️ Advanced parsing failed: {e}")
        return parse_weather_question(question)  # Fall back to basic version

def generate_weather_response_advanced(parsed_question, weather_data, context=None):
    """
    Generate advanced weather responses with context and multi-day support.
    
    Args:
        parsed_question (dict): Parsed question data
        weather_data (dict): Weather data
        context (dict): Conversation context
    
    Returns:
        str: Comprehensive natural language response
    """
    if context is None:
        context = _conversation_context
    
    # Update context with current data
    context["last_location"] = weather_data.get("location")
    context["last_weather_data"] = weather_data
    
    # Handle different query complexities
    query_complexity = parsed_question.get("query_complexity", "simple")
    
    if query_complexity == "multi_day":
        return generate_multi_day_response(parsed_question, weather_data, context)
    elif query_complexity == "comparison":
        return generate_comparison_response(parsed_question, weather_data, context)
    elif query_complexity == "follow_up":
        return generate_follow_up_response(parsed_question, weather_data, context)
    else:
        return generate_enhanced_single_response(parsed_question, weather_data, context)

def generate_multi_day_response(parsed_question, weather_data, context):
    """Generate response for multi-day weather queries."""
    
    location = weather_data.get("location", "your area")
    forecast = weather_data.get("forecast", [])
    time_range = parsed_question.get("time_range", {})
    duration = time_range.get("duration", len(forecast))
    
    if not forecast:
        return f"I don't have forecast data for {location} right now."
    
    # Limit to available forecast days
    days_to_show = min(duration, len(forecast))
    
    system_prompt = f"""
    Create a comprehensive multi-day weather summary for {location}.
    
    User asked: {parsed_question['original_question']}
    Duration requested: {duration} days
    
    Forecast data for {days_to_show} days:
    """
    
    # Add forecast data to prompt
    for i, day in enumerate(forecast[:days_to_show]):
        system_prompt += f"""
    Day {i+1} ({day['date']}):
    - High: {day['max_temp']}°, Low: {day['min_temp']}°
    - Condition: {day['condition']}
    - Precipitation: {day['precipitation_chance']}% chance
    """
    
    system_prompt += """
    Provide a helpful summary that:
    1. Gives an overview of the period
    2. Highlights any significant weather changes
    3. Notes the best and worst days
    4. Provides practical advice for planning
    5. Uses a conversational tone
    """
    
    try:
        response = get_response(
            f"Generate a multi-day weather summary for the forecast data provided.",
            system=system_prompt
        )
        
        # Add weather emoji for the period
        overall_emoji = "🌤️"  # Default
        if any("rain" in day.get('condition', '').lower() for day in forecast[:days_to_show]):
            overall_emoji = "🌧️"
        elif any("sun" in day.get('condition', '').lower() for day in forecast[:days_to_show]):
            overall_emoji = "☀️"
        
        return f"{overall_emoji} {response}"
        
    except Exception as e:
        # Fallback to template
        return generate_multi_day_template(forecast[:days_to_show], location)

def generate_comparison_response(parsed_question, weather_data, context):
    """Generate response for weather comparison queries."""
    
    # This would compare with historical data or previous queries
    current_temp = weather_data['current']['temperature']
    location = weather_data.get("location", "your area")
    
    # For now, provide a contextual comparison
    comparison_context = f"""
    Generate a weather comparison response for: {parsed_question['original_question']}
    
    Current conditions in {location}:
    - Temperature: {current_temp}°
    - Condition: {weather_data['current']['condition']}
    
    Since I don't have historical data, acknowledge the limitation but provide:
    1. Current conditions with context
    2. How today compares to the forecast trend
    3. General seasonal context
    4. Helpful comparative information
    """
    
    try:
        response = get_response(
            "Generate a weather comparison response acknowledging data limitations.",
            system=comparison_context
        )
        return f"🔄 {response}"
    except:
        return f"I can tell you it's currently {current_temp}° in {location}. " \
               f"For accurate comparisons, I'd need historical weather data."

def generate_follow_up_response(parsed_question, weather_data, context):
    """Generate response for follow-up questions."""
    
    # Use conversation history for context
    previous_questions = context.get("conversation_history", [])
    
    follow_up_context = f"""
    This is a follow-up question: {parsed_question['original_question']}
    
    Previous conversation:
    """
    
    for prev in previous_questions[-3:]:  # Last 3 interactions
        follow_up_context += f"- User asked: {prev['question']}\n"
    
    follow_up_context += f"""
    
    Current weather data for {weather_data.get('location')}:
    - Temperature: {weather_data['current']['temperature']}°
    - Condition: {weather_data['current']['condition']}
    
    Provide a natural follow-up response that:
    1. Acknowledges the conversational context
    2. Answers the new question
    3. Connects to previous topics when relevant
    """
    
    try:
        response = get_response(
            "Generate a contextual follow-up response.",
            system=follow_up_context
        )
        return f"💬 {response}"
    except:
        return generate_weather_response(parsed_question, weather_data)

def generate_enhanced_single_response(parsed_question, weather_data, context):
    """Generate enhanced single-day responses with context."""
    
    # Check for user preferences from context
    preferences = context.get("user_preferences", {})
    preferred_units = preferences.get("units", weather_data.get("units", "metric"))
    
    # Enhanced context with preferences
    enhanced_context = f"""
    Generate a personalized weather response for: {parsed_question['original_question']}
    
    Weather data for {weather_data.get('location')}:
    - Current: {weather_data['current']['temperature']}° and {weather_data['current']['condition']}
    - Humidity: {weather_data['current']['humidity']}%
    - Wind: {weather_data['current']['wind_speed']} km/h
    
    User preferences: {preferences}
    Conversation context: {"First interaction" if not context.get('conversation_history') else "Ongoing conversation"}
    
    Make the response:
    1. Naturally conversational
    2. Specific to their question
    3. Include practical advice
    4. Consider their apparent preferences
    """
    
    try:
        response = get_response(
            "Generate an enhanced weather response with context.",
            system=enhanced_context
        )
        return add_weather_formatting(response, weather_data, parsed_question)
    except:
        return generate_weather_response(parsed_question, weather_data)

def generate_multi_day_template(forecast_days, location):
    """Template fallback for multi-day responses."""
    if not forecast_days:
        return f"I don't have forecast data for {location}."
    
    summary = f"Here's the {len(forecast_days)}-day forecast for {location}:\n\n"
    
    for i, day in enumerate(forecast_days):
        day_name = "Today" if i == 0 else f"Day {i+1}"
        summary += f"{day_name} ({day['date']}): {day['max_temp']}°/{day['min_temp']}° - {day['condition']}\n"
    
    # Add simple analysis
    temps = [day['max_temp'] for day in forecast_days]
    summary += f"\nTemperature range: {min(temps)}° to {max(temps)}°"
    
    return summary

# Context management functions
def clear_conversation_context():
    """Clear the conversation context."""
    global _conversation_context
    _conversation_context = {
        "last_location": None,
        "last_weather_data": None,
        "conversation_history": [],
        "user_preferences": {}
    }
    print("🧹 Conversation context cleared")

def get_conversation_summary():
    """Get a summary of the current conversation context."""
    context = _conversation_context
    return {
        "last_location": context.get("last_location"),
        "interaction_count": len(context.get("conversation_history", [])),
        "preferences": context.get("user_preferences", {}),
        "recent_questions": [q["question"] for q in context.get("conversation_history", [])[-3:]]
    }
Me: Now I need main interface functions that automatically choose between the basic and advanced parsing based on the context and question complexity. Can you create wrapper functions that provide a seamless experience while handling all the edge cases?
AI: Absolutely! Here are the main interface functions that provide intelligent routing and seamless experience:
def parse_weather_question(question):
    """
    Main weather question parsing function with intelligent routing.
    
    Args:
        question (str): User's weather-related question
    
    Returns:
        dict: Extracted information including location, time period, and weather attribute
    """
    # Input validation
    if not question or not isinstance(question, str):
        return {"error": "Invalid question: must be a non-empty string"}
    
    question = question.strip()
    if len(question) < 3:
        return {"error": "Question too short to analyze"}
    
    # Analyze question complexity to choose parsing method
    complexity_indicators = {
        "advanced": [
            "this week", "next week", "weekend", "compared to", "warmer than", 
            "cooler than", "what about", "how about", "and tomorrow", "also",
            "better than", "worse than", "instead", "rather than"
        ],
        "multi_day": [
            "week", "days", "weekend", "period", "stretch", "forecast",
            "next few", "coming", "upcoming"
        ],
        "contextual": [
            "there", "that place", "same location", "what about", "how about",
            "also", "too", "as well"
        ]
    }
    
    question_lower = question.lower()
    needs_advanced = False
    
    # Check if advanced parsing is needed
    for category, indicators in complexity_indicators.items():
        if any(indicator in question_lower for indicator in indicators):
            needs_advanced = True
            break
    
    # Check conversation history for context
    has_context = bool(_conversation_context.get("conversation_history"))
    
    # Route to appropriate parser
    try:
        if needs_advanced or has_context:
            result = parse_weather_question_advanced(question, _conversation_context)
            print(f"🧠 Used advanced parsing (complexity detected: {needs_advanced}, context: {has_context})")
        else:
            result = parse_weather_question(question)  # This will use the AI-powered version
            print(f"🔍 Used standard AI parsing")
        
        # Validate and enhance result
        return validate_and_enhance_parsing(result, question)
        
    except Exception as e:
        print(f"⚠️ All parsing methods failed: {e}")
        return {
            "error": f"Could not parse question: {str(e)}",
            "original_question": question,
            "fallback_available": True
        }

def generate_weather_response(parsed_question, weather_data):
    """
    Main weather response generation function with intelligent routing.
    
    Args:
        parsed_question (dict): Parsed question data
        weather_data (dict): Weather data
    
    Returns:
        str: Natural language response
    """
    # Input validation
    if "error" in parsed_question:
        if parsed_question.get("fallback_available"):
            return handle_parsing_error_gracefully(parsed_question, weather_data)
        return f"I couldn't understand your question: {parsed_question['error']}"
    
    if "error" in weather_data:
        return handle_weather_data_error(parsed_question, weather_data)
    
    # Determine response complexity needed
    query_complexity = parsed_question.get("query_complexity", "simple")
    processing_method = parsed_question.get("processing_method", "standard")
    
    try:
        # Route to appropriate response generator
        if processing_method == "ai_advanced" or query_complexity in ["multi_day", "comparison", "follow_up"]:
            response = generate_weather_response_advanced(parsed_question, weather_data, _conversation_context)
            print(f"🎯 Generated advanced response (complexity: {query_complexity})")
        else:
            response = generate_standard_response(parsed_question, weather_data)
            print(f"💬 Generated standard response")
        
        # Post-process and validate response
        final_response = post_process_response(response, parsed_question, weather_data)
        
        # Update conversation context
        update_conversation_context(parsed_question, weather_data, final_response)
        
        return final_response
        
    except Exception as e:
        print(f"⚠️ Response generation failed: {e}")
        return generate_emergency_fallback_response(parsed_question, weather_data)

def validate_and_enhance_parsing(result, original_question):
    """Validate and enhance parsing results."""
    
    # Ensure required fields exist
    required_fields = ["location", "time_period", "attribute"]
    for field in required_fields:
        if field not in result:
            result[field] = "unknown"
    
    # Add confidence scoring if missing
    if "confidence" not in result:
        confidence = "medium"
        if result.get("processing_method") == "ai_advanced":
            confidence = "high"
        elif result.get("processing_method") == "keyword_fallback":
            confidence = "low"
        result["confidence"] = confidence
    
    # Add processing timestamp
    result["processed_at"] = datetime.datetime.now().isoformat()
    
    # Enhance with derived information
    result["needs_forecast"] = result.get("time_period") not in ["current", "now"]
    result["is_specific_location"] = result.get("location") not in ["unknown", "contextual"]
    
    return result

def handle_parsing_error_gracefully(parsed_question, weather_data):
    """Handle parsing errors gracefully with helpful responses."""
    
    error_msg = parsed_question.get("error", "Unknown parsing error")
    original_question = parsed_question.get("original_question", "")
    
    # Try to provide a helpful response anyway
    if "weather" in original_question.lower():
        location = weather_data.get("location", "your area") if "error" not in weather_data else "your area"
        
        if "error" not in weather_data:
            return f"I had trouble understanding your specific question, but I can tell you " \
                   f"the current weather in {location} is {weather_data['current']['temperature']}° " \
                   f"and {weather_data['current']['condition'].lower()}. " \
                   f"Could you try asking in a different way?"
    
    return f"I'm having trouble understanding your question. " \
           f"Try asking something like 'What's the weather in London?' or 'Will it rain tomorrow?'"

def handle_weather_data_error(parsed_question, weather_data):
    """Handle weather data errors with helpful suggestions."""
    
    error_msg = weather_data.get("error", "Unknown weather data error")
    suggestions = weather_data.get("suggestions", [])
    
    response = f"I couldn't get weather data: {error_msg}"
    
    if suggestions:
        response += f" You might try: {', '.join(suggestions[:2])}"
    
    if "location" in error_msg.lower():
        response += f" Make sure to use a major city name or include the country."
    
    return f"⚠️ {response}"

def generate_standard_response(parsed_question, weather_data):
    """Generate standard response (wrapper for existing function)."""
    # This calls the existing generate_weather_response function
    # but with better error handling
    try:
        return generate_weather_response_basic(parsed_question, weather_data)
    except Exception as e:
        return generate_template_response(parsed_question, weather_data)

def generate_emergency_fallback_response(parsed_question, weather_data):
    """Last resort response generation."""
    
    if "error" in weather_data:
        return "I'm having trouble getting weather information right now. Please try again later."
    
    location = weather_data.get("location", "your area")
    current = weather_data.get("current", {})
    
    if current:
        return f"The weather in {location} is currently {current.get('temperature', 'N/A')}° " \
               f"with {current.get('condition', 'unknown conditions').lower()}."
    
    return "I'm having trouble processing your weather question right now. Please try asking again."

def post_process_response(response, parsed_question, weather_data):
    """Post-process responses for consistency and quality."""
    
    # Ensure response isn't too long
    if len(response) > 500:
        # Truncate and add continuation
        response = response[:450] + "... Would you like more details?"
    
    # Ensure response isn't too short
    if len(response) < 20:
        response += f" Feel free to ask for more specific information about {weather_data.get('location', 'the weather')}."
    
    # Add helpful follow-up suggestions for first-time users
    if not _conversation_context.get("conversation_history"):
        if parsed_question.get("confidence") == "high":
            response += " 💡 You can also ask about forecasts, specific days, or weather advice!"
    
    return response

def update_conversation_context(parsed_question, weather_data, response):
    """Update conversation context with the interaction."""
    
    context = _conversation_context
    
    # Update preferences based on user behavior
    if parsed_question.get("attribute") == "temperature":
        context.setdefault("user_preferences", {})["interested_in_temperature"] = True
    
    # Track successful interactions
    context.setdefault("successful_interactions", 0)
    context["successful_interactions"] += 1
    
    # Update last successful query
    context["last_successful_query"] = {
        "question": parsed_question,
        "weather_data": weather_data,
        "response": response,
        "timestamp": datetime.datetime.now().isoformat()
    }

# Main interface functions that users should call
def ask_weather_question(question, location=None):
    """
    Complete weather question answering system.
    
    Args:
        question (str): User's weather question
        location (str, optional): Specific location (overrides question parsing)
    
    Returns:
        str: Natural language weather response
    """
    try:
        print(f"🤔 Processing question: '{question}'")
        
        # Parse the question
        parsed = parse_weather_question(question)
        
        # Override location if provided
        if location:
            parsed["location"] = location
            parsed["location_override"] = True
        
        # Get weather data
        target_location = parsed.get("location", "London")  # Default fallback
        if target_location in ["unknown", "contextual"]:
            target_location = _conversation_context.get("last_location", "London")
        
        print(f"🌍 Getting weather for: {target_location}")
        weather_data = get_weather_data(target_location)
        
        # Generate response
        response = generate_weather_response(parsed, weather_data)
        
        print(f"✅ Response generated successfully")
        return response
        
    except Exception as e:
        print(f"❌ Error in weather question system: {e}")
        return "I'm having trouble with weather information right now. Please try again later."

def test_natural_language_processing():
    """Test the natural language processing system with various questions."""
    
    test_questions = [
        "What's the weather like in London?",
        "Will it rain tomorrow?",
        "Should I bring an umbrella this weekend in Paris?",
        "How's the temperature compared to yesterday?",
        "What about Berlin?",  # Follow-up question
        "Give me the forecast for this week",
        "Is it warmer than usual?",
        "What should I wear today?"
    ]
    
    print("🧪 Testing Natural Language Processing System")
    print("=" * 60)
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. Testing: '{question}'")
        try:
            response = ask_weather_question(question)
            print(f"   Response: {response}")
        except Exception as e:
            print(f"   ❌ Error: {e}")
        
        print("-" * 40)
    
    # Show conversation context
    print(f"\n📋 Conversation Summary:")
    summary = get_conversation_summary()
    for key, value in summary.items():
        print(f"   {key}: {value}")