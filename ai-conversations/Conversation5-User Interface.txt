Tool: Claude
Date: 2025-05-22
Me: I need to create user interface functions for my weather app using pyinputplus. Can you help me build a main menu system and user input functions?
AI: Here's a basic menu system using pyinputplus:
import pyinputplus as pyip
import os

def display_main_menu():
    """Display main menu and get user choice."""
    clear_screen()
    print("=" * 50)
    print("üå¶Ô∏è  WEATHER ADVISOR - MAIN MENU")
    print("=" * 50)
    
    options = [
        "View Current Weather",
        "View Weather Forecast", 
        "Show Temperature Chart",
        "Show Precipitation Chart",
        "Ask Weather Question",
        "Change Location",
        "Settings",
        "Exit"
    ]
    
    choice = pyip.inputMenu(
        options,
        numbered=True,
        prompt="\nPlease select an option:\n"
    )
    
    return options.index(choice)

def get_location_input():
    """Get location from user with validation."""
    location = pyip.inputStr(
        "Enter city name (e.g., 'London', 'New York'): ",
        blockRegexes=[r'^\s*$'],  # Block empty strings
        strip=True
    )
    return location

def clear_screen():
    """Clear the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')
Me: Good.Now I need more sophisticated menu functions that can handle different weather app sections, user preferences, and error handling. Can you enhance this with better organization and user experience?
AI: Here's an enhanced menu system with better organization:
def display_welcome_screen():
    """Display welcome screen with app information."""
    clear_screen()
    print("üå¶Ô∏è" * 20)
    print()
    print("     WELCOME TO WEATHER ADVISOR")
    print("     Your Smart Weather Assistant")
    print()
    print("üå¶Ô∏è" * 20)
    print("\nFeatures:")
    print("‚Ä¢ Current weather conditions")
    print("‚Ä¢ Multi-day forecasts")
    print("‚Ä¢ Interactive charts")
    print("‚Ä¢ Natural language questions")
    print("‚Ä¢ Personalized recommendations")
    
    pyip.inputStr("\nPress Enter to continue...", blank=True)

def get_location_with_validation():
    """Enhanced location input with suggestions."""
    while True:
        try:
            print("\nüìç Location Selection")
            print("-" * 30)
            
            location = pyip.inputStr(
                "Enter location (city, country): ",
                strip=True,
                blockRegexes=[r'^\s*$', r'^[0-9]+$'],  # Block empty and numeric only
                timeout=60
            )
            
            # Quick validation
            if len(location) < 2:
                print("‚ö†Ô∏è Location name too short. Please try again.")
                continue
            
            # Confirm location
            confirm = pyip.inputYesNo(f"Use '{location}' as your location? (y/n): ")
            if confirm == 'yes':
                return location
            
        except pyip.TimeoutException:
            print("‚è∞ Input timed out. Using default location: London")
            return "London"
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            exit()

def display_settings_menu():
    """Settings and preferences menu."""
    while True:
        clear_screen()
        print("‚öôÔ∏è  SETTINGS & PREFERENCES")
        print("=" * 40)
        
        settings_options = [
            "Change Temperature Units",
            "Set Default Location", 
            "Chart Display Preferences",
            "Clear Cache",
            "View System Status",
            "Back to Main Menu"
        ]
        
        choice = pyip.inputMenu(
            settings_options,
            numbered=True,
            prompt="\nSelect a setting to modify:\n"
        )
        
        choice_index = settings_options.index(choice)
        
        if choice_index == 0:
            change_temperature_units()
        elif choice_index == 1:
            set_default_location()
        elif choice_index == 2:
            set_chart_preferences()
        elif choice_index == 3:
            clear_app_cache()
        elif choice_index == 4:
            display_system_status()
        else:
            break

def change_temperature_units():
    """Change temperature unit preferences."""
    print("\nüå°Ô∏è Temperature Units")
    print("-" * 25)
    
    units = pyip.inputMenu(
        ["Celsius (¬∞C)", "Fahrenheit (¬∞F)"],
        numbered=True,
        prompt="Select temperature unit:\n"
    )
    
    selected_unit = "metric" if "Celsius" in units else "imperial"
    
    # Update global preferences (would save to config in real app)
    print(f"‚úÖ Temperature unit set to {units}")
    pyip.inputStr("Press Enter to continue...", blank=True)
    
    return selected_unit

def weather_question_interface():
    """Interface for natural language weather questions."""
    clear_screen()
    print("ü§ñ ASK WEATHER ADVISOR")
    print("=" * 35)
    print("Ask me anything about the weather!")
    print("Examples:")
    print("‚Ä¢ 'Will it rain tomorrow?'")
    print("‚Ä¢ 'Should I bring a jacket?'")
    print("‚Ä¢ 'What's the weather like in Paris?'")
    print("\nType 'quit' to return to main menu")
    print("-" * 35)
    
    while True:
        try:
            question = pyip.inputStr(
                "\n‚ùì Your question: ",
                strip=True,
                timeout=120
            )
            
            if question.lower() in ['quit', 'exit', 'back']:
                break
            
            if len(question) < 5:
                print("‚ö†Ô∏è Please ask a more detailed question.")
                continue
            
            # Process question (would call NLP functions)
            print(f"\nü§î Processing: '{question}'")
            print("üí≠ Analyzing your question...")
            
            # Simulate response (replace with actual function call)
            response = ask_weather_question(question)
            print(f"\nüå¶Ô∏è {response}")
            
            # Ask if user wants to continue
            continue_chat = pyip.inputYesNo("\nAsk another question? (y/n): ")
            if continue_chat == 'no':
                break
                
        except pyip.TimeoutException:
            print("‚è∞ Question input timed out.")
            break
        except KeyboardInterrupt:
            print("\n‚Ü©Ô∏è Returning to main menu...")
            break
Me: Now I need the main application loop that ties everything together and handles navigation between different sections. Can you create the main controller function?
AI: Here's the main application controller with complete navigation:
def main_application():
    """Main application controller and navigation hub."""
    # Initialize app state
    current_location = None
    weather_data = None
    app_settings = {
        "units": "metric",
        "show_charts": True,
        "auto_refresh": True
    }
    
    # Welcome sequence
    display_welcome_screen()
    
    # Get initial location
    print("üöÄ Let's get started!")
    current_location = get_location_with_validation()
    print(f"‚úÖ Location set to: {current_location}")
    
    # Main application loop
    while True:
        try:
            # Refresh weather data if needed
            if weather_data is None or app_settings.get("auto_refresh", True):
                print(f"\nüåê Getting weather data for {current_location}...")
                weather_data = get_weather_data(current_location, units=app_settings["units"])
                
                if "error" in weather_data:
                    print(f"‚ö†Ô∏è {weather_data['error']}")
                    change_location = pyip.inputYesNo("Try a different location? (y/n): ")
                    if change_location == 'yes':
                        current_location = get_location_with_validation()
                        continue
            
            # Display main menu and get choice
            choice = display_main_menu()
            
            # Route to appropriate function
            if choice == 0:  # Current Weather
                display_current_weather_detailed(weather_data)
                
            elif choice == 1:  # Weather Forecast
                display_forecast_detailed(weather_data)
                
            elif choice == 2:  # Temperature Chart
                if app_settings["show_charts"]:
                    create_temperature_visualisation(weather_data)
                else:
                    print("üìä Charts are disabled in settings")
                wait_for_user()
                
            elif choice == 3:  # Precipitation Chart
                if app_settings["show_charts"]:
                    create_precipitation_visualisation(weather_data)
                else:
                    print("üìä Charts are disabled in settings")
                wait_for_user()
                
            elif choice == 4:  # Ask Question
                weather_question_interface()
                
            elif choice == 5:  # Change Location
                new_location = get_location_with_validation()
                if new_location != current_location:
                    current_location = new_location
                    weather_data = None  # Force refresh
                    
            elif choice == 6:  # Settings
                old_settings = app_settings.copy()
                app_settings = handle_settings_menu(app_settings)
                
                # Check if location-affecting settings changed
                if old_settings["units"] != app_settings["units"]:
                    weather_data = None  # Force refresh with new units
                    
            elif choice == 7:  # Exit
                confirm_exit = pyip.inputYesNo("Are you sure you want to exit? (y/n): ")
                if confirm_exit == 'yes':
                    print("\nüëã Thank you for using Weather Advisor!")
                    print("Stay weather-wise! üå¶Ô∏è")
                    break
                    
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"\n‚ùå An error occurred: {e}")
            continue_app = pyip.inputYesNo("Continue using the app? (y/n): ")
            if continue_app == 'no':
                break

def display_current_weather_detailed(weather_data):
    """Display detailed current weather information."""
    if "error" in weather_data:
        print(f"‚ùå {weather_data['error']}")
        wait_for_user()
        return
    
    clear_screen()
    current = weather_data["current"]
    location = weather_data.get("location", "Unknown")
    
    print("üå§Ô∏è  CURRENT WEATHER CONDITIONS")
    print("=" * 45)
    print(f"üìç Location: {location}")
    print(f"üå°Ô∏è  Temperature: {current['temperature']}¬∞ (feels like {current['feels_like']}¬∞)")
    print(f"‚òÅÔ∏è  Condition: {current['condition']}")
    print(f"üíß Humidity: {current['humidity']}%")
    print(f"üí® Wind: {current['wind_speed']} km/h {current['wind_direction']}")
    print(f"üîç Visibility: {current['visibility']} km")
    
    if current.get('uv_index'):
        print(f"‚òÄÔ∏è  UV Index: {current['uv_index']}")
    
    print("=" * 45)
    wait_for_user()

def display_forecast_detailed(weather_data):
    """Display detailed weather forecast."""
    if "error" in weather_data or not weather_data.get("forecast"):
        print("‚ùå No forecast data available")
        wait_for_user()
        return
    
    clear_screen()
    print("üìÖ WEATHER FORECAST")
    print("=" * 35)
    
    for i, day in enumerate(weather_data["forecast"][:5]):
        day_name = "Today" if i == 0 else f"Day {i+1}"
        print(f"\n{day_name} ({day['date']}):")
        print(f"  üå°Ô∏è  High: {day['max_temp']}¬∞ | Low: {day['min_temp']}¬∞")
        print(f"  ‚òÅÔ∏è  {day['condition']}")
        print(f"  üåßÔ∏è  Rain chance: {day['precipitation_chance']}%")
    
    print("\n" + "=" * 35)
    wait_for_user()

def wait_for_user():
    """Wait for user input to continue."""
    pyip.inputStr("\nüëÜ Press Enter to continue...", blank=True)

def handle_settings_menu(current_settings):
    """Handle settings menu and return updated settings."""
    # This would integrate with the settings menu functions
    display_settings_menu()
    return current_settings

# Quick start function for testing
def quick_start():
    """Quick start function for development/testing."""
    print("üöÄ Quick Start Mode")
    location = pyip.inputStr("Enter location (or press Enter for London): ", blank=True)
    if not location:
        location = "London"
    
    weather_data = get_weather_data(location)
    response = ask_weather_question("What's the weather like?")
    print(f"\n{response}")

# Entry point
if __name__ == "__main__":
    try:
        main_application()
    except Exception as e:
        print(f"Fatal error: {e}")
        print("Please restart the application.")
